<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Jt7sq=jn(4wD64|nAd5l" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="14Q3u$LHf!K$5q~z},l`" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace pfRecorder {" line1="    let data: number[][] = [];" line2="    let isRecording = false;" line3="    let isPlaying = false;" line4="" line5="    // type ReverseMap = {" line6="    //     [key: number]: number;" line7="    // };" line8="" line9="    // let reverseComboDirectMode: ReverseMap = {" line10="    //     // Combo direct mode" line11="    //     0b01: 0b10," line12="    //     0b10: 0b01," line13="    // }" line14="" line15="    // let reverseSingleOutputMode: ReverseMap = {" line16="    //     // Single output mode" line17="    //     0b0001: 0b1111," line18="    //     0b0010: 0b1110," line19="    //     0b0011: 0b1101," line20="    //     0b0100: 0b1100," line21="    //     0b0101: 0b1011," line22="    //     0b0110: 0b1010," line23="    //     0b0111: 0b1001," line24="" line25="    //     0b1111: 0b0001," line26="    //     0b1110: 0b0010," line27="    //     0b1101: 0b0011," line28="    //     0b1100: 0b0100," line29="    //     0b1011: 0b0101," line30="    //     0b1010: 0b0110," line31="    //     0b1001: 0b0111," line32="    // }" line33="" line34="    // Reversing commands (beta)" line35="    // ToDo: reverse only specified channel and output." line36="    function reverseCommands(commands: number[][]): number[][]{" line37="        let out: number[][] = [];" line38="        let max = commands.length - 1;" line39="" line40="        for (let n = max; n &gt;= 0; n--){" line41="            let task = commands[n];" line42="" line43="            // // let channel = (0b001100000000 &amp; task[0]) &gt;&gt;&gt; 8;" line44="            // let mode = (0b000001110000 &amp; task[0]) &gt;&gt;&gt; 4;" line45="            // let data: number = 0;" line46="" line47="            // if (mode == 1) {" line48="            //     let red: number = (0b000000000011 &amp; task[0]);" line49="            //     let blue: number = (0b000000001100 &amp; task[0]) &gt;&gt;&gt; 2;" line50="" line51="            //     data = (reverseComboDirectMode[blue] &lt;&lt; 2) | reverseComboDirectMode[red];" line52="            // } else {" line53="            //     let output = (0b000000110000 &amp; task[0]) &gt;&gt;&gt; 4;" line54="" line55="            //     data = reverseSingleOutputMode[(0b000000001111 &amp; task[0])];" line56="            // }" line57="" line58="            // let newTask: number = (0b111111110000 &amp; task[0]) | data;" line59="            // out.push([newTask, task[1], task[2]])" line60="            out.push(task)" line61="        }" line62="" line63="        // Last command is usually stop." line64="        out.push(commands[max])" line65="" line66="        serial.writeString('Reversed:\n')" line67="        serial.writeString(JSON.stringify(out) + '\n');" line68="        return out;" line69="    }" line70="" line71="    function startRecord(){" line72="        basic.clearScreen();" line73="        led.plot(0, 0)" line74="        serial.writeString('Recording...\n')" line75="        pfReceiver.startRecord([0]);" line76="    }" line77="" line78="    function stopRecord(){" line79="        pfReceiver.stopRecord();" line80="        data = pfReceiver.getRecordedCommands();" line81="        basic.showNumber(data.length);" line82="        serial.writeString(JSON.stringify(data) + '\n');" line83="    }" line84="" line85="    function onButtonA(){" line86="        if (isRecording) {" line87="            stopRecord();" line88="        } else {" line89="            startRecord()" line90="        }" line91="" line92="        isRecording = !isRecording" line93="    }" line94="" line95="    function onButtonB() {" line96="        if (!isPlaying) {" line97="            isPlaying = true;" line98="            control.runInBackground(() =&gt; {" line99="                basic.showString('&gt;')" line100="                pfTransmitter.play(data);" line101="                basic.clearScreen()" line102="                isPlaying = false;" line103="            })" line104="        } else {" line105="            isPlaying = false;" line106="            pfTransmitter.stopPlaying();" line107="        }" line108="    }" line109="" line110="    function reverse() {" line111="        if (!isPlaying) {" line112="            isPlaying = true;" line113="            control.runInBackground(() =&gt; {" line114="                basic.showString('&lt;')" line115="                pfTransmitter.play(reverseCommands(data));" line116="                basic.clearScreen()" line117="                isPlaying = false;" line118="            })" line119="        } else {" line120="            isPlaying = false;" line121="            pfTransmitter.stopPlaying();" line122="        }" line123="    }" line124="" line125="    input.onButtonPressed(Button.A, function() {" line126="        onButtonA()" line127="    })" line128="" line129="    input.onButtonPressed(Button.B, function() {" line130="        onButtonB()" line131="    })" line132="" line133="    input.onButtonPressed(Button.A, function () {" line134="        onButtonA()" line135="    })" line136="" line137="    input.onButtonPressed(Button.AB, function () {" line138="        reverse()" line139="    })" line140="" line141="    /**" line142="     * Initialize recorder." line143="     */" line144="    //% blockId=&quot;pfRecorder_init&quot;" line145="    //% block=&quot;initialize : receiver pin %irReceiverPin transmitter pin %irTransmitterPin control channel %recorderControlChannel&quot;" line146="    //% weight=100" line147="    export function init(irReceiverPin: DigitalPin, irTransmitterPin: AnalogPin, recorderControlChannel: PfReceiverChannel){" line148="        pfReceiver.connectIrReceiver(irReceiverPin)" line149="        pfTransmitter.connectIrSenderLed(irTransmitterPin)" line150="" line151="        pfReceiver.onRCcommand(recorderControlChannel, PfControl.Forward, PfControl.Float, PfAction.Pressed, onButtonA)" line152="        pfReceiver.onRCcommand(recorderControlChannel, PfControl.Backward, PfControl.Float, PfAction.Pressed, onButtonB)" line153="        pfReceiver.onRCcommand(recorderControlChannel, PfControl.Float, PfControl.Backward, PfAction.Pressed, reverse)" line154="    }" line155="}" numlines="156"></mutation><next><block type="pfRecorder_init" id="*O?+Ml`@}+A;(MefIPq+"><field name="irReceiverPin">DigitalPin.P2</field><field name="irTransmitterPin">AnalogPin.P0</field><field name="recorderControlChannel">PfReceiverChannel.Channel2</field></block></next></block></statement></block></xml>